///
/// Core logic for generating a @media query blocks.
///
/// @access private
///
/// @param {Map} $breakpoint
/// @param {String} $query
///
@mixin _respond($breakpoint, $query) {
    $breakpoint-down: ($query == 'down');
    $min-width: map-get($breakpoints, $breakpoint);
    $media-query: if($breakpoint-down, 'max-width', 'min-width');

    @if $breakpoint-down {
        $min-width: $min-width - 0.02px;
    }

    @if $min-width == 0 or $min-width == null {
        @content;
    } @else {
        @media (#{$media-query}: $min-width) {
            @content;
        }
    }
}

///
/// Any CSS that should *only* occur below a certain breakpoint.
///
/// @access public
///
/// @param {String} $breakpoint
///
@mixin respond-down($breakpoint) {
    @include _respond($breakpoint, 'down') {
        @content;
    }
}

///
/// Any CSS that should occur above a certain breakpoint.
///
/// @access public
///
/// @param {String} $breakpoint
///
@mixin respond-up($breakpoint) {
    @include _respond($breakpoint, 'up') {
        @content;
    }
}

///
/// Generate CSS rules for spacing types (margin/padding) based on the
/// abbreviations and values used in the Bootstrap classes (e.g. `my-md-1`).
///
/// @access private
///
/// @param {String} $space_type 'margin' or 'padding'
/// @param {String} $direction  't', 'r', 'b', 'l', 'x', 'y'
/// @param {String} $value      '0', '1', '2', '3', '4', '5', 'auto'
/// @param {String} $breakpoint 'xs', 'sm', 'md', 'lg', 'xl'
///
@mixin _spacing($space_type, $direction, $value, $breakpoint) {
    @include respond-up($breakpoint) {
        @if $direction == null {
            #{$space_type}: map-get($spacing, $value);
        }
        @else {
            @each $direction in map-get($spacing_directions, $direction) {
                #{$space_type}-#{$direction}: map-get($spacing, $value);
            }
        }
    }
}

///
/// Add margin based on the Bootstrap class convention.
///
/// This mixin will **not** add an `!important` like the Bootstrap classes.
///
/// @access public
///
/// @param {String} $direction  't', 'r', 'b', 'l', 'x', 'y'
/// @param {String} $value      '0', '1', '2', '3', '4', '5', 'auto'
/// @param {String} $breakpoint 'xs', 'sm', 'md', 'lg', 'xl'
///
@mixin margin($direction: null, $value: 0, $breakpoint: xs) {
    @include _spacing('margin', $direction, $value, $breakpoint);
}

///
/// Add padding based on the Bootstrap class convention.
///
/// This mixin will **not** add an `!important` like the Bootstrap classes.
///
/// @access public
///
/// @param {String} $direction  't', 'r', 'b', 'l', 'x', 'y'
/// @param {String} $value      '0', '1', '2', '3', '4', '5', 'auto'
/// @param {String} $breakpoint 'xs', 'sm', 'md', 'lg', 'xl'
///
@mixin padding($direction: null, $value: 0, $breakpoint: xs) {
    @include _spacing('padding', $direction, $value, $breakpoint);
}

///
/// Make text "muted"
///
/// @access public
///
/// @param {Boolean} $important Whether or not include an `!important` in
///                             these rules
///
@mixin text-muted($important: false) {
    opacity: 0.7 if($important, !important, null);
}
